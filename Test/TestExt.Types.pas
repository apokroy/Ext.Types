unit TestExt.Types;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Windows, System.SysUtils, System.Variants, Ext.Types.Date, System.Types;

type
  // Test methods for class TDate

  TestTDate = class(TTestCase)
  strict private
    FDate: TDate;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestToString;
    procedure TestToString1;
    procedure TestFormat;
    procedure TestFormat1;
    procedure TestParse;
    procedure TestParse1;
    procedure TestTryParse;
    procedure TestTryParse1;
    procedure TestStartOfMonth;
    procedure TestEndOfMonth;
    procedure TestStartOfWeek;
    procedure TestStartOfWeek1;
    procedure TestEndOfWeek;
    procedure TestEndOfWeek1;
    procedure TestEncode;
    procedure TestEncode1;
    procedure TestDecode;
    procedure TestDecode1;
    procedure TestToday;
    procedure TestRange;
    procedure TestSequence;
    procedure TestAdd;
    procedure TestSubtract;
    procedure TestSubtract1;
    procedure TestImplicit;
    procedure TestImplicit1;
    procedure TestExplicit;
    procedure TestExplicit1;
    procedure TestExplicit2;
    procedure TestExplicit3;
    procedure TestInc;
    procedure TestDec;
    procedure TestNegative;
    procedure TestPositive;
    procedure TestEqual;
    procedure TestNotEqual;
    procedure TestGreaterThan;
    procedure TestGreaterThanOrEqual;
    procedure TestLessThan;
    procedure TestLessThanOrEqual;
  end;

implementation

procedure TestTDate.SetUp;
begin
  FDate := TDate.Today;
end;

procedure TestTDate.TearDown;
begin
end;

procedure TestTDate.TestToString;
begin
  CheckEquals(DateToStr(System.SysUtils.Date), TDate.Today.ToString);
end;

procedure TestTDate.TestToString1;
begin
  CheckEquals(DateToStr(System.SysUtils.Date, FormatSettings), TDate.Today.ToString(FormatSettings));
end;

procedure TestTDate.TestFormat;
var
  Date: TDate;
begin
  Date.Encode(2020, 02, 29);
  CheckEquals('29.02.2020', Date.Format('DD.MM.YYYY'));
end;

procedure TestTDate.TestFormat1;
var
  Date: TDate;
  FS: TFormatSettings;
begin
  FS := FormatSettings;
  FS.ShortMonthNames[2] := 'Feb';
  Date.Encode(2020, 02, 29);
  CheckEquals('29 Feb 2020', Date.Format('DD MMM YYYY', FS));
end;

procedure TestTDate.TestParse;
var
  S: string;
  Date: TDate;
begin
  S := DateToStr(System.SysUtils.Now);
  Date.Parse(S);
  CheckEquals(S, Date.ToString);
end;

procedure TestTDate.TestParse1;
var
  S: string;
  Date: TDate;
  FS: TFormatSettings;
begin
  FS := FormatSettings;
  FS.ShortDateFormat := 'YYYY-MM-DD';
  FS.DateSeparator := '-';

  S := DateToStr(System.SysUtils.Now, FS);
  Date.Parse(S, FS);
  CheckEquals(S, Date.ToString(FS));
end;

procedure TestTDate.TestTryParse;
var
  S: string;
  Date: TDate;
begin
  S := DateToStr(System.SysUtils.Now);
  if Date.TryParse(S) then
    CheckEquals(S, Date.ToString)
  else
    raise Exception.Create('Error parse: ' + S);
end;

procedure TestTDate.TestTryParse1;
var
  S: string;
  Date: TDate;
  FS: TFormatSettings;
begin
  FS := FormatSettings;
  FS.ShortDateFormat := 'YYYY-MM-DD';
  FS.DateSeparator := '-';

  S := DateToStr(System.SysUtils.Now, FS);
  if Date.TryParse(S, FS) then
    CheckEquals(S, Date.ToString(FS))
  else
    raise Exception.Create('Error parse: ' + S);
end;

procedure TestTDate.TestStartOfMonth;
begin
  FDate.Encode(2020, 2, 29);
  CheckEquals(2020, FDate.StartOfMonth.Year);
  CheckEquals(2, FDate.StartOfMonth.Month);
  CheckEquals(1, FDate.StartOfMonth.Day);
end;

procedure TestTDate.TestEndOfMonth;
begin
  FDate.Encode(2020, 2, 1);
  CheckEquals(2020, FDate.EndOfMonth.Year);
  CheckEquals(2, FDate.EndOfMonth.Month);
  CheckEquals(29, FDate.EndOfMonth.Day);
end;

procedure TestTDate.TestStartOfWeek;
begin
  CheckEquals(FDate.StartOfWeek.Weekday, FirstDayOfWeek);
end;

procedure TestTDate.TestStartOfWeek1;
begin
  CheckEquals(FDate.StartOfWeek(Thursday).Weekday, Thursday);
end;

procedure TestTDate.TestEndOfWeek;
begin

end;

procedure TestTDate.TestEndOfWeek1;
begin
end;

procedure TestTDate.TestEncode;
begin
  FDate.Encode(2020, 2, 29);
  CheckEquals(FDate, EncodeDate(2020, 2, 29));
end;

procedure TestTDate.TestEncode1;
begin
  FDate.Encode(TYear(2020), TMonth(2), TDay(29));
  CheckEquals(FDate, EncodeDate(2020, 2, 29));
end;

procedure TestTDate.TestDecode;
begin
end;

procedure TestTDate.TestDecode1;
begin
end;

procedure TestTDate.TestToday;
begin
end;

procedure TestTDate.TestRange;
begin
end;

procedure TestTDate.TestSequence;
begin
end;

procedure TestTDate.TestAdd;
begin
end;

procedure TestTDate.TestSubtract;
begin
end;

procedure TestTDate.TestSubtract1;
begin
end;

procedure TestTDate.TestImplicit;
begin
end;

procedure TestTDate.TestImplicit1;
begin
end;

procedure TestTDate.TestExplicit;
begin
end;

procedure TestTDate.TestExplicit1;
begin
end;

procedure TestTDate.TestExplicit2;
begin
end;

procedure TestTDate.TestExplicit3;
begin
end;

procedure TestTDate.TestInc;
begin
end;

procedure TestTDate.TestDec;
begin
end;

procedure TestTDate.TestNegative;
begin
end;

procedure TestTDate.TestPositive;
begin
end;

procedure TestTDate.TestEqual;
begin
end;

procedure TestTDate.TestNotEqual;
begin
end;

procedure TestTDate.TestGreaterThan;
begin
end;

procedure TestTDate.TestGreaterThanOrEqual;
begin
end;

procedure TestTDate.TestLessThan;
begin
end;

procedure TestTDate.TestLessThanOrEqual;
begin
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDate.Suite);
end.

